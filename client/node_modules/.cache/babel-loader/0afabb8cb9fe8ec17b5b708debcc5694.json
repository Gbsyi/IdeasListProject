{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const clearError = () => setError(null);\n\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      'Content-Type': 'application/json'\n    };\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Что-то пошло не так');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"NCsxjGa0wkehAcsW4fUtPMCJJW8=\");","map":{"version":3,"sources":["D:/Projects/Node.js/List/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","clearError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","message","e"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAK;AAAA;;AACxB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMO,UAAU,GAAG,MAAMD,QAAQ,CAAC,IAAD,CAAjC;;AAEA,QAAME,OAAO,GAAGP,WAAW,CAAC,gBAAOQ,GAAP,EAAyF;AAAA,QAA9EC,MAA8E,uEAArE,KAAqE;AAAA,QAA9DC,IAA8D,uEAAvD,IAAuD;AAAA,QAAjDC,OAAiD,uEAAvC;AAAC,sBAAe;AAAhB,KAAuC;AACjHR,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIO,IAAJ,EAAS;AACLA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACH;;AACD,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAK;AAACC,QAAAA,MAAD;AAAQC,QAAAA,IAAR;AAAaC,QAAAA;AAAb,OAAL,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,qBAA1B,CAAN;AACH;;AAEDjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOa,IAAP;AACH,KAbD,CAcA,OAAOK,CAAP,EAAU;AACNlB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACgB,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACH;AACJ,GArB0B,EAqBxB,EArBwB,CAA3B;AAwBA,SAAO;AACHnB,IAAAA,OADG;AAEHK,IAAAA,OAFG;AAGHH,IAAAA,KAHG;AAIHE,IAAAA;AAJG,GAAP;AAOH,CArCM;;GAAML,O","sourcesContent":["import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () =>{\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    const request = useCallback(async (url,method = 'GET', body = null, headers = {'Content-Type':'application/json'}) =>{\r\n        setLoading(true);\r\n        try {\r\n            if (body){\r\n                body = JSON.stringify(body);\r\n            }\r\n            const response = await fetch(url,{method,body,headers});\r\n            const data = await response.json();\r\n\r\n            if(!response.ok){\r\n                throw new Error(data.message || 'Что-то пошло не так');\r\n            }\r\n            \r\n            setLoading(false);\r\n            return data;\r\n        }  \r\n        catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }     \r\n    }, []);\r\n\r\n\r\n    return {\r\n        loading,\r\n        request,\r\n        error,\r\n        clearError\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}